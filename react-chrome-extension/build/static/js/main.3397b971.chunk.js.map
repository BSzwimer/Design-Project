{"version":3,"sources":["Hooks/useWindowPosition.js","Contexts/ModalProvider.js","Components/Modal.js","App.js","index.js"],"names":["useWindowPosition","windowPosition","x","y","ModalContext","React","createContext","ModalProvider","children","useState","undefined","extensionId","setExtensionId","useEffect","window","addEventListener","event","source","data","type","Provider","value","getExtensionId","postMessage","Modal","getURL","document","URL","Consumer","hasDraggedWindowPosition","handle","defaultPosition","position","id","className","style","transform","color","size","onClick","console","log","App","ReactDOM","render","getElementById"],"mappings":"iUAOeA,EANW,WACxB,MAAO,CACLC,eAAiB,CAAEC,EAAG,IAAKC,EAAG,OCArBC,EAAeC,IAAMC,cAAc,IAiCjCC,EA/BO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACfP,EAAmBD,IAAnBC,eAD8B,EAEAQ,wBAASC,GAFT,mBAE/BC,EAF+B,KAElBC,EAFkB,KAkBtC,OAVAC,qBAAU,WAERC,OAAOC,iBAAiB,WAAW,SAASC,GACtCA,EAAMC,SAAWH,QACjBE,EAAME,KAAKC,MAA6B,wBAApBH,EAAME,KAAKC,MACjCP,EAAeI,EAAME,KAAKP,kBAG7B,IAGD,kBAACP,EAAagB,SAAd,CACEC,MAAO,CACLV,cACAW,eAlBN,WACER,OAAOS,YAAY,CAAEJ,KAAM,oBAAsB,MAkB7ClB,mBAGDO,ICgFQgB,EAxGD,WAqCZ,IAAMC,EAAS,WACb,OAAOC,SAASC,KAUlB,OACE,kBAACvB,EAAawB,SAAd,MACG,gBACC3B,EADD,EACCA,eACA4B,EAFD,EAECA,yBACAlB,EAHD,EAGCA,YAHD,EAICW,eAJD,OAMC,kBAAC,IAAD,CACEQ,OAAO,gBACPC,gBAAiB,CAAE7B,EAAGD,EAAeC,EAAGC,EAAGF,EAAeE,GAC1D6B,SACEH,EACI,CAAE3B,EAAGD,EAAeC,EAAGC,EAAGF,EAAeE,GACzC,MAGN,yBACE8B,GAAG,QACHC,UAAU,eACVC,MAAO,CACLC,UAAWnC,IAGb,yBAAKiC,UAAU,6BACb,oCACE,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,sBACb,kBAAC,IAAD,CAAGG,MAAM,UAAUC,KAAK,SAG5B,yBAAKJ,UAAU,iBACb,4BAAKvB,GAEL,4BACE4B,QAAS,WACPC,QAAQC,IAAIhB,MAIdS,UAAU,gBANZ,6BC1ELQ,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCPNC,IAASC,OACP,oCACE,kBAAC,EAAD,OACGlB,SAASmB,eAAe,mB","file":"static/js/main.3397b971.chunk.js","sourcesContent":["\nconst useWindowPosition = () => {\n  return {\n    windowPosition:  { x: 100, y: 100 },\n  }\n};\n\nexport default useWindowPosition;\n","import React, { useEffect, useState } from 'react';\nimport useWindowPosition from '../Hooks/useWindowPosition';\n\nexport const ModalContext = React.createContext({});\n\nconst ModalProvider = ({ children }) => {\n  const { windowPosition } = useWindowPosition();\n  const [extensionId, setExtensionId] = useState(undefined);\n\n  function getExtensionId() {\n    window.postMessage({ type: \"GET_EXTENSION_ID\" }, \"*\");\n  }\n\n  useEffect(() => {\n    // Set up event listeners from Content script\n    window.addEventListener(\"message\", function(event) {\n      if (event.source !== window) return;\n      if (event.data.type && (event.data.type === \"EXTENSION_ID_RESULT\")) {\n        setExtensionId(event.data.extensionId);\n      }\n    });\n  }, []);\n\n  return (\n    <ModalContext.Provider\n      value={{\n        extensionId,\n        getExtensionId,\n        windowPosition,\n      }}\n    >\n      {children}\n    </ModalContext.Provider>\n  );\n};\n\nexport default ModalProvider;\n","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { X } from \"react-feather\";\nimport Draggable from \"react-draggable\";\nimport { ModalContext } from \"../Contexts/ModalProvider\";\nconst api = \"http://127.0.0.1:5000/\";\n\nconst Modal = () => {\n  //   //this will be used to return from the backend the dictionary of image->date pairs\n  //   const [imagePairs, search]\n\n  // // Unique ID for the className.\n  // var MOUSE_VISITED_CLASSNAME = \"crx_mouse_visited\";\n\n  // // Previous dom, that we want to track, so we can remove the previous styling.\n  // var prevDOM = null;\n\n  // // Mouse listener for any move event on the current document.\n  // document.addEventListener(\n  //   \"mousemove\",\n  //   function (e) {\n  //     let srcElement = e.srcElement;\n\n  //     // Lets check if our underlying element is a IMG.\n  //     if (prevDOM != srcElement && srcElement.nodeName == \"IMG\") {\n  //       // For NPE checking, we check safely. We need to remove the class name\n  //       // Since we will be styling the new one after.\n  //       if (prevDOM != null) {\n  //         prevDOM.classList.remove(MOUSE_VISITED_CLASSNAME);\n  //       }\n\n  //       // Add a visited class name to the element. So we can style it.\n  //       srcElement.classList.add(MOUSE_VISITED_CLASSNAME);\n\n  //       // The current element is now the previous. So we can remove the class\n  //       // during the next ieration.\n  //       prevDOM = srcElement;\n  //       console.info(srcElement.currentSrc);\n  //       console.dir(srcElement);\n  //     }\n  //   },\n  //   false\n  // );\n\n  const getURL = () => {\n    return document.URL;\n  };\n\n  const callScript = async () => {\n    const url = getURL();\n    const response = await axios.get(\n      \"http://127.0.0.1:5000/geturl/?page=Paper_Mario:_The_Origami_King\"\n    );\n    return response;\n  };\n  return (\n    <ModalContext.Consumer>\n      {({\n        windowPosition,\n        hasDraggedWindowPosition,\n        extensionId,\n        getExtensionId,\n      }) => (\n        <Draggable\n          handle=\".modal-handle\"\n          defaultPosition={{ x: windowPosition.x, y: windowPosition.y }}\n          position={\n            hasDraggedWindowPosition\n              ? { x: windowPosition.x, y: windowPosition.y }\n              : null\n          }\n        >\n          <div\n            id=\"modal\"\n            className=\"modal-window\"\n            style={{\n              transform: windowPosition,\n            }}\n          >\n            <div className=\"modal-window-inner-border\">\n              <>\n                <div className=\"modal-body\">\n                  <div className=\"modal-handle\">\n                    <div className=\"modal-close-button\">\n                      <X color=\"#5d6484\" size=\"14\" />\n                    </div>\n                  </div>\n                  <div className=\"modal-content\">\n                    <h3>{extensionId}</h3>\n\n                    <button\n                      onClick={() => {\n                        console.log(getURL());\n\n                        //console.log(callScript());\n                      }}\n                      className=\"modal-button\"\n                    >\n                      RUN MINUTE MAN?\n                    </button>\n                  </div>\n                </div>\n              </>\n            </div>\n          </div>\n        </Draggable>\n      )}\n    </ModalContext.Consumer>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\nimport './App.css';\nimport Modal from './Components/Modal';\nimport ModalProvider from './Contexts/ModalProvider';\n\n/**\n * @return {null}\n */\nfunction App() {\n  return (\n    <ModalProvider>\n      <Modal />\n    </ModalProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>, document.getElementById('modal-window'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}